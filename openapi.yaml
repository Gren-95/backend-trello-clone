openapi: 3.0.0
info:
  title: Trello Clone API
  description: Backend for a simple Trello clone application
  version: 1.0.0

servers:
  - url: /
    description: Server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Boards
    description: Board management endpoints
  - name: Lists
    description: List management endpoints
  - name: Cards
    description: Card management endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
  schemas:
    Board:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        isArchived:
          type: boolean
          default: false
        background:
          type: string
          description: URL or color code for board background
        isTemplate:
          type: boolean
          default: false
        isFavorite:
          type: boolean
          default: false
        members:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              role:
                type: string
                enum: [owner, admin, member]
    List:
      type: object
      required:
        - title
        - boardId
      properties:
        id:
          type: string
        boardId:
          type: string
        userId:
          type: string
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Card:
      type: object
      required:
        - title
        - listId
      properties:
        id:
          type: string
        listId:
          type: string
        userId:
          type: string
        title:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        labels:
          type: array
          items:
            type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              url:
                type: string
              type:
                type: string
        checklist:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    text:
                      type: string
                    completed:
                      type: boolean
        comments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              userId:
                type: string
              text:
                type: string
              createdAt:
                type: string
                format: date-time
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT token for authentication
    User:
      type: object
      required:
        - username
      properties:
        id:
          type: string
        username:
          type: string
        createdAt:
          type: string
          format: date-time
    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        password:
          type: string
          minLength: 6
          format: password
    LogoutResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Authentication
      security: []  # No authentication required for login
      summary: Login to get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    post:
      tags:
        - Authentication
      security:
        - bearerAuth: []
      summary: Logout and revoke current token
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      tags:
        - Authentication
      security: []
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username or password format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards:
    get:
      tags:
        - Boards
      security:
        - bearerAuth: []  # Require authentication for GET
      summary: Get all boards
      responses:
        200:
          description: A list of boards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Create a new board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
      responses:
        201:
          description: Board created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}:
    get:
      tags:
        - Boards
      security:
        - bearerAuth: []  # Require authentication for GET
      summary: Get a specific board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Board retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Not authorized to view this board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Update a board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                background:
                  type: string
                isTemplate:
                  type: boolean
      responses:
        200:
          description: Board updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        403:
          description: Forbidden - Not authorized to update this board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Board not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Delete a board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      responses:
        204:
          description: Board deleted successfully
        403:
          description: Forbidden - Not authorized to delete this board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Board not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}/lists:
    get:
      tags:
        - Lists
      security:
        - bearerAuth: []  # Require authentication for GET
      summary: Get all lists for a board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Lists retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Not authorized to view this board's lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Lists
      security:
        - bearerAuth: []
      summary: Create a new list
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
      responses:
        201:
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        403:
          description: Forbidden - Not authorized to create lists in this board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lists/{listId}:
    get:
      tags:
        - Lists
      security: []  # No authentication required for GET
      summary: Get a specific list
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: string
    put:
      tags:
        - Lists
      security:
        - bearerAuth: []
      summary: Update a list
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                position:
                  type: integer
                  minimum: 0
      responses:
        200:
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        403:
          description: Forbidden - Not authorized to update this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Lists
      security:
        - bearerAuth: []
      summary: Delete a list
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: string
      responses:
        204:
          description: List deleted successfully
        403:
          description: Forbidden - Not authorized to delete this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lists/{listId}/cards:
    get:
      tags:
        - Cards
      security:
        - bearerAuth: []  # Require authentication for GET
      summary: Get all cards in a list
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Not authorized to view cards in this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Create a new card
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                labels:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        403:
          description: Forbidden - Not authorized to create cards in this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/{cardId}:
    get:
      tags:
        - Cards
      security:
        - bearerAuth: []  # Require authentication for GET
      summary: Get a specific card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Card retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Not authorized to view this card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Update a card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                labels:
                  type: array
                  items:
                    type: string
                listId:
                  type: string
                position:
                  type: integer
                  minimum: 0
      responses:
        200:
          description: Card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        403:
          description: Forbidden - Not authorized to update this card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Delete a card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      responses:
        204:
          description: Card deleted successfully
        403:
          description: Forbidden - Not authorized to delete this card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/{cardId}/move:
    patch:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Move a card to a different list
      parameters:
        - in: path
          name: cardId
          required: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: string
                  description: The ID of the list to move the card to
                position:
                  type: number
                  minimum: 0
                  description: The position within the list (0-based index)
      responses:
        200:
          description: Card moved successfully
        400:
          description: Invalid list ID or position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Card or list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Position conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}/share:
    post:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Share board with other users
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [admin, member]
      responses:
        200:
          description: Board shared successfully
        400:
          description: Invalid user ID or role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Board or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}/archive:
    post:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Archive or unarchive a board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - archived
              properties:
                archived:
                  type: boolean
      responses:
        200:
          description: Board archive status updated successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}/favorite:
    post:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Add or remove board from favorites
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - favorite
              properties:
                favorite:
                  type: boolean
      responses:
        200:
          description: Board favorite status updated successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/templates:
    get:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Get all board templates
      responses:
        200:
          description: List of board templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /boards/{boardId}/duplicate:
    post:
      tags:
        - Boards
      security:
        - bearerAuth: []
      summary: Create a copy of a board
      parameters:
        - in: path
          name: boardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                keepMembers:
                  type: boolean
                  default: false
      responses:
        201:
          description: Board duplicated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/{cardId}/attachments:
    post:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Add attachment to card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Attachment added successfully
        400:
          description: Invalid file format or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        413:
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/{cardId}/checklist:
    post:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Add checklist to card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
      responses:
        201:
          description: Checklist added successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/{cardId}/comments:
    post:
      tags:
        - Cards
      security:
        - bearerAuth: []
      summary: Add comment to card
      parameters:
        - in: path
          name: cardId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
      responses:
        201:
          description: Comment added successfully
        400:
          description: Invalid comment text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 